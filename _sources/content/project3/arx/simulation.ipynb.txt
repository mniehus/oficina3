{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc66f82b-c67b-4713-bd63-ffba461b2876",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.6.1 (SDL 2.28.4, Python 3.12.4)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pygame\n",
    "from pygame.locals import QUIT, MOUSEBUTTONDOWN, KEYDOWN\n",
    "import sys\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "from PyQt5.QtWidgets import QApplication, QMainWindow\n",
    "from PyQt5.QtCore import Qt\n",
    "from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\n",
    "import pygetwindow as gw\n",
    "import pyaudio\n",
    "import threading\n",
    "import control\n",
    "import param"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d647a07c-6cb8-4a22-be75-91e62f2ebdd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extracting constants from param module\n",
    "L1, L2, m1, m2, I1, I2, g, dp, wheelradius = param.L1, param.L2, param.m1, param.m2, param.I1, param.I2, param.g, param.dp, param.wheelradius\n",
    "J, Ng, ke, kt, R, L, B = param.J, param.Ng, param.ke, param.kt, param.R, param.L, param.B\n",
    "Q_LQR, R_LQR, N_LQR = param.Q_LQR, param.R_LQR, param.N_LQR\n",
    "StabilizeBound = param.StabilizeBound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e05377f-e7d6-45bd-9134-77f921f478d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LQR (linear quadratic regulator) controller parameter\n",
    "a = (m1 * L1 * L1) + (m2 * L2 * L2) + (I1)\n",
    "b = (m1 * L1 + m2 * L2) * g\n",
    "\n",
    "a21 = b/a\n",
    "a24 = (kt * ke * Ng * Ng)/(a * R)\n",
    "a41 = -b/a\n",
    "a44 = -(a + J) * (kt * ke * Ng * Ng) /(a * J * R)\n",
    "\n",
    "b2 = -(kt*Ng)/(a*R)\n",
    "b4 = (a + J) * (kt * Ng)/(a * J * R)\n",
    "\n",
    "A_matrix = np.array([[0, 1, 0, 0],\n",
    "                     [a21, 0, 0, a24],\n",
    "                     [0, 0, 0, 1],\n",
    "                     [a41, 0, 0 , a44]])\n",
    "\n",
    "B_Matrix = np.array([[0],\n",
    "                     [b2],\n",
    "                     [0],\n",
    "                     [b4]])\n",
    "\n",
    "desired_poles = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "05db12c9-60bd-4d80-a639-d119f91d3cf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ==========================================================================================\n",
    "# ======================================= FUNCTION =========================================\n",
    "# ==========================================================================================\n",
    "def Forwardkinematics(q):\n",
    "    x = L2 * math.sin(q)\n",
    "    y = L2 * math.cos(q)\n",
    "    return x, y\n",
    "\n",
    "def PendulumEnergy(q):\n",
    "    K = (\n",
    "        (0.5 * m1 * math.pow(qp_d * L1, 2))\n",
    "        + (0.5 * m2 * math.pow(qp_d * L2, 2))\n",
    "        + (0.5 * J * qp_d * qp_d)\n",
    "        + (0.5 * I1 * qp_d * qp_d)\n",
    "    )  # Kinetic energy\n",
    "    P = (m1 + m2) * g * L2 * math.cos(q)  # Potential energy\n",
    "    return K + P\n",
    "\n",
    "def MotorDynamics(Vin, dt):\n",
    "    global qr_d, qr, curr_prev, curr_d\n",
    "    curr = (Vin - (qr_d * ke) - (L * curr_d)) / R\n",
    "    curr_d = (curr - curr_prev)/dt\n",
    "    Tm = curr * kt\n",
    "    qr_dd = (Tm - B * qr_d) / J\n",
    "    qr_d = qr_d + (qr_dd * dt)\n",
    "    qr = qr + (qr_d * dt)\n",
    "    curr_prev = curr\n",
    "    return Tm\n",
    "\n",
    "\n",
    "def RwipDynamics(q, Tr, Tp):\n",
    "    qdd = (\n",
    "        (m1 * g * L1 * math.sin(q)) + (m2 * g * L2 * math.sin(q)) - Tr + Tp - dp * qp_d\n",
    "    ) / ((m1 * L1**2.0) + (m2 * L2) + I1)\n",
    "    return qdd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e16feeae-f42e-4838-9cdf-23652303a323",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_figure(screen, qp, qp_d, qr_d, Tm, Vin, Tp, setpoint):\n",
    "    x_offset = 200\n",
    "    y_offset = 360\n",
    "    multiplier = 800\n",
    "\n",
    "    # Draw RWIP\n",
    "    x, y = Forwardkinematics(qp)\n",
    "    x, y = x_offset - x * multiplier, y_offset - y * multiplier\n",
    "    pygame.draw.line(screen, BLACK, (x_offset, y_offset), (x, y), 5)\n",
    "\n",
    "    # Draw wheel\n",
    "    pygame.draw.circle(screen, GREY, (x, y), wheelradius * multiplier, 8)\n",
    "\n",
    "    # Draw cross\n",
    "    cross_length = wheelradius * multiplier\n",
    "    cross_dx = cross_length * np.sin(qr) * 0.8\n",
    "    cross_dy = -cross_length * np.cos(qr) * 0.8\n",
    "    pygame.draw.line(\n",
    "        screen, BLACK, (x - cross_dx, y - cross_dy), (x + cross_dx, y + cross_dy), 2\n",
    "    )\n",
    "    pygame.draw.line(\n",
    "        screen, BLACK, (x - cross_dy, y + cross_dx), (x + cross_dy, y - cross_dx), 2\n",
    "    )\n",
    "\n",
    "    # Draw pendulum point\n",
    "    pygame.draw.circle(screen, BLACK, (x, y), 5)\n",
    "    pygame.draw.circle(screen, BLACK, (x_offset, y_offset), 5)\n",
    "\n",
    "    # Draw text\n",
    "    font = pygame.font.Font(None, 18)\n",
    "    texts = [\n",
    "        f\"Setpoint (deg): {round(np.rad2deg(setpoint), 2)}\",\n",
    "        f\"Pendulum Angle (deg): {round(np.rad2deg(qp), 2)}\",\n",
    "        f\"Pendulum Speed (deg/s) : {round(np.rad2deg(qp_d), 2)}\",\n",
    "        f\"Controller Mode : {controller_mode}\",\n",
    "    ]\n",
    "    for i, text in enumerate(texts):\n",
    "        rendered_text = font.render(text, True, WHITE)\n",
    "        screen.blit(rendered_text, (10, 80 + i * 20))\n",
    "    \n",
    "    texts = [\n",
    "        f\"Motorspeed (RPM): {round(qr_d * 60 / (math.pi * 2), 2)}\",\n",
    "        f\"Apply Torque (Nm): {round(Tm, 2)}\",\n",
    "        f\"Vin (V): {round(Vin, 2)}\",\n",
    "    ]\n",
    "    for i, text in enumerate(texts):\n",
    "        rendered_text = font.render(text, True, WHITE)\n",
    "        screen.blit(rendered_text, (230, 80 + i * 20))\n",
    "\n",
    "    texts = [\n",
    "        f\"FUEL: {round(controller_energy, 2)}\",\n",
    "        f\"TIME: {round(controller_time, 2)}\",\n",
    "    ]\n",
    "    for i, text in enumerate(texts):\n",
    "        rendered_text = font.render(text, True, BLACK)\n",
    "        screen.blit(rendered_text, (10, 170 + i * 20))\n",
    "\n",
    "\n",
    "def plot_graph():\n",
    "    plt.clf()\n",
    "\n",
    "    # Create the first subplot\n",
    "    plt.subplot(2, 1, 1)\n",
    "    plt.plot(timedt_data, qp_data, label=\"qp\", color=\"blue\", linewidth=2)\n",
    "    plt.plot(timedt_data, setpoint_data, label=\"setpoint\", color=\"red\", linewidth=2)\n",
    "    plt.legend()\n",
    "\n",
    "    # Create the second subplot\n",
    "    plt.subplot(2, 1, 2)\n",
    "    plt.plot(timedt_data, qr_d_data, label=\"qr_d\", color=\"purple\", linewidth=2)\n",
    "    plt.legend(loc=\"upper left\")\n",
    "    ax2 = plt.twinx()\n",
    "    ax2.plot(timedt_data, Tm_data, label=\"Tm\", color=\"green\", linewidth=2)\n",
    "    ax2.set_ylim(-1, 1)\n",
    "    ax2.legend(loc=\"upper right\")\n",
    "\n",
    "    # Display the figure\n",
    "    canvas = FigureCanvas(fig)\n",
    "    win.setCentralWidget(canvas)\n",
    "    win.show()\n",
    "\n",
    "def on_click(event):\n",
    "    plot_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "753b7586-158e-4068-b52f-cc953b89773c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ==========================================================================================\n",
    "# ========================================= EXTRA ==========================================\n",
    "# ==========================================================================================\n",
    "\n",
    "p = pyaudio.PyAudio()\n",
    "BITRATE = 90000  # number of frames per second/frameset.\n",
    "FREQUENCY = 2000  # Hz, waves per second, 261.63=C4-note.\n",
    "BITRATE = max(BITRATE, FREQUENCY + 100)\n",
    "stream = p.open(format=p.get_format_from_width(1), channels=1, rate=BITRATE, output=True)\n",
    "stop_thread = False\n",
    "\n",
    "def generate_sound():\n",
    "    \"\"\"Generate and play sound with current frequency in a loop.\"\"\"\n",
    "    while not stop_thread:\n",
    "        # Generate wave data for 1 second\n",
    "        NUMBEROFFRAMES = int(BITRATE * 0.0002)  # 1 second of sound\n",
    "        WAVEDATA = \"\"\n",
    "        for x in range(NUMBEROFFRAMES):\n",
    "            try:\n",
    "                WAVEDATA += chr(int(math.sin(x / ((BITRATE / FREQUENCY) / math.pi)) * 127 + 128))\n",
    "            except ZeroDivisionError:\n",
    "                WAVEDATA += chr(128)\n",
    "        # Play sound\n",
    "        stream.write(WAVEDATA)\n",
    "\n",
    "# Start sound generation in a separate thread\n",
    "sound_thread = threading.Thread(target=generate_sound)\n",
    "if param.Sound:\n",
    "    sound_thread.start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bc19e27e-5ad7-4f23-bb4d-875fa2f5e6ad",
   "metadata": {},
   "outputs": [
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Utilizador\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:3585: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ==========================================================================================\n",
    "# ======================================= MAIN LOGIC =======================================\n",
    "# ==========================================================================================\n",
    "qp = np.deg2rad(param.init_qp)\n",
    "qp_d = param.init_qp_d\n",
    "\n",
    "qr = param.init_qr  # Initial reaction wheel angle\n",
    "qr_d = param.init_qr_d  # Initial reaction wheel speed\n",
    "\n",
    "curr_prev = 0\n",
    "curr_d = 0\n",
    "\n",
    "Tm = param.init_Tm  # Initial reaction wheel torque\n",
    "Tp = param.init_Tp  # Initial disturbance torque\n",
    "\n",
    "controller_stat_flag = False\n",
    "controller_stat_flag_last = False\n",
    "controller_time = 0\n",
    "controller_energy = 0\n",
    "\n",
    "timedt = 0\n",
    "dt = 1 / 100  # frequency (Hz)\n",
    "reqE = (m1 + m2) * g * L2 * math.cos(0)\n",
    "\n",
    "setpoint = 0 # do not adjust\n",
    "\n",
    "# For LQR control\n",
    "K, S, E = control.lqr(A_matrix, B_Matrix, Q_LQR, R_LQR, N_LQR)\n",
    "\n",
    "# For PID control\n",
    "s = control.TransferFunction.s\n",
    "G = (s/(-J-m1*L1*L1))/((s**3 + ((B/I1) + (B + dp)/(m2*L2*L2))*s**2 - ((m1*L1 + m2*L2)*g/((J + m2*L2*L2)*I1) - (B + dp)/((J+m2*L2*L2)*I1))*s - (m1*L1 + m2*L2)*B*g/((J+m2*L2*L2)*I1)))\n",
    "C = 1/s\n",
    "\n",
    "# Plot the root locus\n",
    "if param.Stabilize_Controller == \"PID\" and param.plot_rootlocus:\n",
    "    print(\"PID Mode\")\n",
    "    print(\"Waiting for root locus ...\")\n",
    "    print(G)\n",
    "    control.rlocus(C*G)\n",
    "    print(\"Systemzero: \", control.zero(G))\n",
    "    print(\"Systempoles: \", control.pole(G))\n",
    "    plt.title('Root Locus Plot')\n",
    "    plt.xlabel('Re')\n",
    "    plt.ylabel('Im')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "    print(\"Initialize simulation\")\n",
    "\n",
    "\n",
    "d_flag = 0\n",
    "\n",
    "settled_flag = False\n",
    "wait_flag = False\n",
    "\n",
    "running = True\n",
    "input_flag = False\n",
    "input_string = \"\"\n",
    "\n",
    "pygame.init()\n",
    "\n",
    "width, height = 400, 560\n",
    "screen = pygame.display.set_mode((width, height))\n",
    "pygame.display.set_caption(\"Reaction Wheel Inverted Pendulum\")\n",
    "pygame_windows = gw.getWindowsWithTitle(\"Reaction Wheel Inverted Pendulum\")\n",
    "\n",
    "WHITE = (255, 255, 255)\n",
    "GREY = (100, 100, 100)\n",
    "RED = (255, 0, 0)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "font = pygame.font.Font(None, 36)\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "\n",
    "app = QApplication(sys.argv)\n",
    "win = QMainWindow()\n",
    "win.setWindowFlag(Qt.FramelessWindowHint)  # Remove the title bar\n",
    "fig = plt.figure(num=\"plot output\", figsize=(5, 5))\n",
    "plt.text(0, 0.4, \"Click on the pendulum display to plot.\\n\\nDon't spam, it lags.\", fontsize = 15)\n",
    "plt.axis('off')\n",
    "canvas = FigureCanvas(fig)\n",
    "win.setCentralWidget(canvas)\n",
    "win.show()\n",
    "plt.gcf().canvas.mpl_connect('button_press_event', on_click)\n",
    "timedt_data = []\n",
    "qp_data = []\n",
    "setpoint_data = []\n",
    "Tm_data = []\n",
    "qr_d_data = []\n",
    "\n",
    "while running:\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == QUIT:\n",
    "            running = False\n",
    "        elif event.type == MOUSEBUTTONDOWN:\n",
    "            if 10 < event.pos[0] < 110 and 10 < event.pos[1] < 60:\n",
    "                input_flag = True\n",
    "            if 292 < event.pos[0] < 392 and 10 < event.pos[1] < 60:\n",
    "                qp = np.deg2rad(param.init_qp)\n",
    "                qp_d = param.init_qp_d \n",
    "                qr = param.init_qr\n",
    "                qr_d = param.init_qr_d\n",
    "                Tm = 0\n",
    "                Tp = 0\n",
    "                settled_flag = False\n",
    "                wait_flag = False\n",
    "                timedt = 0 \n",
    "                timedt_data = []\n",
    "                qp_data = []\n",
    "                setpoint_data = []\n",
    "                Tm_data = []\n",
    "                qr_d_data = []\n",
    "                controller_time = 0\n",
    "                controller_energy = 0\n",
    "            if event.pos[1] > 160:\n",
    "                plot_graph()\n",
    "        elif event.type == KEYDOWN:\n",
    "            if event.key == pygame.K_BACKSPACE:\n",
    "                input_string = input_string[:-1]\n",
    "            elif event.key == pygame.K_RETURN:\n",
    "                input_flag = True\n",
    "            else:\n",
    "                input_string += event.unicode\n",
    "\n",
    "    if input_flag == True:\n",
    "        try:\n",
    "            Tp = -float(input_string)\n",
    "        except:\n",
    "            Tp = 0\n",
    "            input_string = \"\"\n",
    "        input_flag = False\n",
    "    else:\n",
    "        Tp = 0\n",
    "\n",
    "    # ==========================================================================================\n",
    "    # ======================================= Controller =======================================\n",
    "    # ==========================================================================================\n",
    "    setpoint_offset = (qp - math.pi) / (2 * math.pi)\n",
    "    if setpoint_offset < 0:\n",
    "        setpoint = (math.floor(setpoint_offset) + 1) * 2 * math.pi\n",
    "    elif setpoint_offset > 0:\n",
    "        setpoint = math.ceil(setpoint_offset) * 2 * math.pi\n",
    "\n",
    "    E = PendulumEnergy(q=qp)\n",
    "\n",
    "    if wait_flag:\n",
    "        controller_mode = \"brake\"\n",
    "        if abs(E) < 0.05:\n",
    "            wait_flag = False\n",
    "    elif abs(qp) % (2 * math.pi) <= np.deg2rad(StabilizeBound) or abs(qp) % (2 * math.pi) >= np.deg2rad(360 - StabilizeBound):\n",
    "        settled_flag = True\n",
    "        controller_mode = param.Stabilize_Controller\n",
    "        controller_stat_flag = True\n",
    "    else:\n",
    "        if settled_flag:\n",
    "            wait_flag = True\n",
    "            settled_flag = False\n",
    "        if not wait_flag:\n",
    "            controller_mode = \"Bang-bang\"\n",
    "\n",
    "    if controller_mode == \"LQR\":\n",
    "        e = setpoint - qp\n",
    "        Vin = e * K[0, 0] + qp_d * -K[0, 1]\n",
    "    elif controller_mode == \"PID\":\n",
    "        e = setpoint - qp\n",
    "        Vin = -e * param.Kp\n",
    "    elif controller_mode == \"Bang-bang\":\n",
    "        if (qp_d < 0 and E < reqE) or (qp_d >= 0 and E >= reqE):\n",
    "            Vin = 12\n",
    "        elif (qp_d >= 0 and E < reqE) or (qp_d < 0 and E >= reqE):\n",
    "            Vin = -12\n",
    "        else:\n",
    "            Vin = 0\n",
    "    elif controller_mode == \"brake\":\n",
    "        if qp_d < 0:\n",
    "            Vin = -12\n",
    "        elif qp_d >= 0:\n",
    "            Vin = 12\n",
    "    else:\n",
    "        Vin = 0\n",
    "    if param.MotorLimit:\n",
    "        # Actual Limit\n",
    "        if Vin > 24:\n",
    "            Vin = 24\n",
    "        elif Vin < -24:\n",
    "            Vin = -24\n",
    "            \n",
    "    Tm = MotorDynamics(Vin, dt)\n",
    "    FREQUENCY = pow(abs(qr_d), 2)\n",
    "    qp_dd = RwipDynamics(qp, Tm, Tp)\n",
    "    qp_d = qp_d + (qp_dd * dt)\n",
    "    qp = qp + (qp_d * dt)\n",
    "\n",
    "    # Draw background\n",
    "    screen.fill(WHITE)\n",
    "    pygame.draw.rect(screen, (24, 24, 24), (0, 0, 401, 160))\n",
    "\n",
    "    # Draw grid\n",
    "    for i in range(0, 401, 50):\n",
    "        pygame.draw.line(screen, GREY, (i, 160), (i, 600), 1)\n",
    "    for i in range(160, 560, 50):\n",
    "        pygame.draw.line(screen, GREY, (0, i), (400, i), 1)\n",
    "\n",
    "    # Draw figure\n",
    "    plot_figure(screen, qp, qp_d, qr_d, Tm, Vin, Tp, setpoint)\n",
    "    timedt_data.append(timedt)\n",
    "    qp_data.append(qp)\n",
    "    setpoint_data.append(setpoint)\n",
    "    Tm_data.append(Tm)\n",
    "    qr_d_data.append(qr_d)\n",
    "\n",
    "    # move graph with pygame\n",
    "    win.move(pygame_windows[0].left + 420, pygame_windows[0].top + 50)\n",
    "    win.showNormal()\n",
    "\n",
    "    # Draw button\n",
    "    pygame.draw.rect(screen, GREY, (10, 10, 100, 50))\n",
    "    text = font.render(\"INJECT\", True, WHITE)\n",
    "    screen.blit(text, (20, 23))\n",
    "    pygame.draw.rect(screen, RED, (292, 10, 100, 50))\n",
    "    text = font.render(\"RESET\", True, (255, 255, 255))\n",
    "    screen.blit(text, (303, 23))\n",
    "\n",
    "    # Draw disturbance input field\n",
    "    pygame.draw.rect(screen, GREY, (110, 10, 130, 50))\n",
    "    pygame.draw.rect(screen, WHITE, (125, 20, 100, 30))\n",
    "    text = font.render(input_string, True, (0, 0, 0))\n",
    "    screen.blit(text, (130, 25))\n",
    "\n",
    "    # calculate FPS and draw\n",
    "    fps = clock.get_fps()\n",
    "    timedt += dt\n",
    "    if(abs(np.rad2deg(qp) - np.rad2deg(setpoint)) < 0.1):\n",
    "        controller_stat_flag = False\n",
    "    elif(controller_stat_flag):\n",
    "        controller_time += dt\n",
    "        controller_energy += abs(qr_d * Tm) * dt\n",
    "    if(controller_mode != param.Stabilize_Controller or not controller_stat_flag_last and controller_stat_flag and (abs(np.rad2deg(qp) - np.rad2deg(setpoint)) < 0.1)):\n",
    "        controller_time = 0\n",
    "        controller_energy = 0\n",
    "    controller_stat_flag_last = controller_stat_flag\n",
    "    if fps:\n",
    "        dt = 1 / fps\n",
    "\n",
    "    pygame.display.flip()\n",
    "    clock.tick(165)\n",
    "\n",
    "pygame.quit()\n",
    "stop_thread = True\n",
    "sys.exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bf9c352-9bd9-4839-969a-d5a4994b3de0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
