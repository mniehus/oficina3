{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4cd10d68-6e12-4803-819c-368461a728b1",
   "metadata": {},
   "source": [
    "## PID código exemplo para aeropendulum *simulado*\n",
    "Para implementar um código de referência para o aeropendulo foi utilizada a biblioteca `PID_RT`de __[Rob Tillaart](https://github.com/RobTillaart/PID_RT)__, também disponivel via biblioteca Arduino. O código está disponivel  __[neste simulador online](https://wokwi.com/projects/412312875773779969)__ (adaptado de __[aqui](https://wokwi.com/projects/356437164264235009)__ e __[aqui](https://wokwi.com/projects/357374218559137793)__ ). \n",
    "\n",
    "\n",
    "```c++\n",
    "//\n",
    "//    FILE: PID_simulation\n",
    "//  AUTHOR:  mn\n",
    "// PURPOSE: demo\n",
    "//\n",
    "// https://wokwi.com/projects/412312875773779969//  \n",
    "// adapted from https://wokwi.com/projects/356437164264235009\n",
    "////\n",
    "// See also https://wokwi.com/projects/357374218559137793\n",
    "\n",
    "#include \"PID_RT.h\" // ALM / https://github.com/RobTillaart/PID_RT\n",
    "\n",
    "PID_RT PID;  //instantiate controller object\n",
    "\n",
    "#define PWM 3  //PWM controller output\n",
    "#define INPUT_PIN1 A0  //manual setpoint (target angle 0-thetamax deg)\n",
    "#define INPUT_PIN2  A1  //manual sensor reading (measured angle 0-thetamax deg)\n",
    "#define INPUT_PIN3  A2  //manual PWM controller output (0-255)\n",
    "\n",
    "//plant (aeropendulum) start state\n",
    "float trueAngle=0.0;  //deg   //start angle\n",
    "float trueOmega=0.0; //deg/s start omega\n",
    "\n",
    "//controller maximum ratings\n",
    "float thetamax=20.0;  //deg  (controller input max)\n",
    "float pwmmax=255; // (controller output max)\n",
    "\n",
    "//controller setpoint\n",
    "float targetAngle=trueAngle;//   //deg\n",
    "//float setPoint=targetAngle;\n",
    "\n",
    "//controller input (sensor reading)\n",
    "float measuredAngle=trueAngle;  //deg\n",
    "//float input = measuredAngle;\n",
    "\n",
    "//controller output\n",
    "float  pwm; \n",
    "//float output=pwm;\n",
    "\n",
    "void setup()\n",
    "{\n",
    "  Serial.begin(115200);\n",
    "  Serial.println(__FILE__);\n",
    "  Serial.println(\"SetPoint(deg) Sensor(deg) PWM(0-255)\");\n",
    "\n",
    "  pinMode(PWM, OUTPUT);\n",
    "\n",
    "  //set up controller\n",
    "  PID.setPoint(targetAngle);\n",
    "  PID.setOutputRange(0, pwmmax);  // PWM range\n",
    "  PID.setInterval(100); //update time in ms\n",
    "  PID.setK(10, 0, 0); //PID coefficients\n",
    "  PID.start();\n",
    "  }\n",
    "\n",
    "void loop(){\n",
    "  //update setPoint\n",
    "  targetAngle = thetamax*analogRead(A0)/1023; //pot A0\n",
    "  \n",
    "  //update controller\n",
    "  controller();\n",
    "\n",
    "  //update plant\n",
    "  analogWrite(PWM, pwm); //real life\n",
    "  //trueAngle = simPlant(); // simulate plant and angle\n",
    "  trueAngle = thetamax*analogRead(A1)/1023; //regulated plant\n",
    "\n",
    "  //measurement\n",
    "  measuredAngle=readSensor();\n",
    "\n",
    "  //show values\n",
    "  show();\n",
    "\n",
    "  delay(20); //throttle\n",
    "}\n",
    "\n",
    "void controller(){\n",
    "  PID.setPoint(targetAngle);\n",
    "   if(PID.compute(measuredAngle)){\n",
    "    pwm = PID.getOutput();\n",
    "  }\n",
    "}\n",
    "\n",
    "float simPlant(){    // simulate the aeropendulum\n",
    "   float g = 9.81; //\n",
    "   float m = 0.1 ; // \n",
    "   float L = 0.5; //\n",
    "   float pwm2lift_coefficient=0.5*(m*g)/L/m/pwmmax; //% of gravitational torque\n",
    "   static float theta = trueAngle; //start angle (deg)\n",
    "   static float lasttheta = theta; //deg\n",
    "   static float omega = 0;\n",
    "   static float lastomega = omega; //deg/s\n",
    "   static uint32_t lastTime = 0;\n",
    "   uint32_t dt = 100; // ms //update period\n",
    "   if(millis() - lastTime >= dt){\n",
    "      theta = lasttheta + lastomega*dt/1000;\n",
    "      omega = lastomega + 180/3.14*(-g/L*sin(lasttheta*3.14/180)+ pwm2lift_coefficient*pwm)*dt/1000;\n",
    "      lastTime += dt;   //bookkeeping references\n",
    "      lasttheta=theta;\n",
    "      lastomega=omega;\n",
    "   }\n",
    "   return theta;\n",
    "}\n",
    "\n",
    "float readSensor(){\n",
    "  return trueAngle; //change to real or virtual measurement\n",
    "}\n",
    "\n",
    "void show(void){\n",
    "  static uint32_t last = 0;\n",
    "  const int dt = 1000;\n",
    "  if (millis() - last > dt){\n",
    "    last += dt;\n",
    "    //Serial.print(millis()/1000.0); \n",
    "    Serial.print(PID.getSetPoint(),1);\n",
    "    Serial.print(' '); \n",
    "    Serial.print(measuredAngle,1);\n",
    "    Serial.print(' '); \n",
    "    Serial.println(byte(pwm));\n",
    "  }\n",
    "}\n",
    "\n",
    "/*\n",
    "float driverModel(byte pwm, float Vmax){\n",
    "  //attention: 3.7 or 5.0 V !?\n",
    "  //maximum current?\n",
    "  return Vmax*pwm/255;  //outputs dc voltage\n",
    "}\n",
    "\n",
    "float motorModel(float Vdc, float Vmax){\n",
    "  return Vdc*rpm/Vmax;//outputs rpm\n",
    "}\n",
    "\n",
    "float lift(){\n",
    "  return 0.0;\n",
    "}\n",
    "*/\n",
    "\n",
    "// -- END OF FILE --\n",
    "```\n",
    "\n",
    "O código encontra disponivel no seguinte simulador online:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee33f40d-d2f9-4bf4-a040-26a75b84caaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"560\"\n",
       "            height=\"315\"\n",
       "            src=\"https://wokwi.com/projects/412312875773779969\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x15c74724f50>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import IFrame\n",
    "IFrame(width=\"560\", height=\"315\", src=\"https://wokwi.com/projects/412312875773779969\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
