%   Converts a matlab vector into a C header for Arduino
%
%   This function takes three arguments: a vector, a string naming
%   the variable and the resulting header file and the numerical
%   type of the array elements. Since this is meant for the Arduino
%   PROGMEM is used to write this as a constant to ROM.
%
%   This code is part of the AutomationShield hardware and software
%   ecosystem. Visit http://www.automationshield.com for more
%   details. This code is licensed under a Creative Commons
%   Attribution-NonCommercial 4.0 International License.
%
%   Created by:      Gergely Takács and Peter Chmurciak.
%   Last updated by: Peter Chmurciak
%   Last update on:  29.8.2019.

function vectorToC(var, varName, numtype)

switch nargin                                   % Handling argument numbers
    case 1
        varName = 'var';
        numtype = 'int';
        warning('Name undefined using "var". Type undefined, using "int".')
    case 2                                      % If numeric type not defined
        numtype = 'int';
        warning('Type undefined, using "int".')
end

if min(size(var)) ~= 1
    error('Function defined for vectors only.')
    return
else
    if (strcmp(numtype, 'int'))
        disp(['Vector elements saved as int types. Use "pgm_read_word(&', varName, '[i])" to access the i-th element.'])
    elseif (strcmp(numtype, 'float'))
        disp(['Vector elements saved as float types. Use "pgm_read_float_near(&', varName, '[i])" to access the i-th element.'])
    end
    
    filehandle = fopen([varName, '.h'], 'wt');

    fprintf(filehandle, ['// Arduino AVR Compatible Vector Header\n']);
    fprintf(filehandle, ['// Automatically generated by the AutomationShield library.\n']);
    fprintf(filehandle, ['// Visit www.automationshield.com for more information.\n']);
    fprintf(filehandle, ['// ========================================================\n']);
    fprintf(filehandle, '\n');

    fprintf(filehandle, ['#ifndef ', varName, '_H\n']);
    fprintf(filehandle, ['#define ', varName, '_H\n']);
    fprintf(filehandle, '\n');
    fprintf(filehandle, ['#include <avr/pgmspace.h>']);
    fprintf(filehandle, '\n');
    fprintf(filehandle, ['#define ', varName, '_length %d\n'], length(var));
    fprintf(filehandle, ['const PROGMEM ', numtype, ' ', varName, '[', varName, '_length]={%.9g'], var(1));
    fprintf(filehandle, ',\n %.9g', var(2:end));
    fprintf(filehandle, '};\n');
    fprintf(filehandle, '#endif\n');
    fclose(filehandle);

    disp(['Vector exported to "', varName, '.h".'])
end