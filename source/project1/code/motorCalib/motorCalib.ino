// ----- Our 'State machines' ------
//void WaveformFSM_update();
//void PWMOutputFSM_update();
//void RPM_FSM_update();
//void DataLogger_FSM_update(bool includeTimeMs, bool includeWaveform, bool includePWM, bool includeRPM)
//UserInput_FSM_update();   // updates user inputs
//UserOutput_FSM_update();  // updates user outputs

// ----- Shared signals (global) ----

// Generated by WaveformFSM_update(), read by PWMOutputFSM_update()
byte sig_waveform_value;   // 0..255 latest waveform sample

// Generated by PWMOutputFSM_update(), and written to PWM pin (0..255)
byte sig_pwm_applied = 0;  // 0..255 latest value written to PWM pin

// enerated by RPM_FSM_update(), Latest computed RPM
float sig_rpm = 0.0f;

// ---Encoder counter and Interrupt (global) ---

// Encoder pulse counter (incremented ONLY in ISR)
volatile unsigned long sig_encoder_pulses = 0;

void encoderISR() {
  sig_encoder_pulses++;
}

// ---- Synchronization (global flags)  ----

// PWM update event counter (incremented by PWMOutputFSM_update on each write)
unsigned long sig_pwm_update_counter = 0;

// ---- USER INPUT SIGNALS  ----
byte sig_input_button = 0;        // 0=not pressed, 1=pressed (debounced, normalized)
int  sig_input_pot    = 0;        // 0..1023 raw ADC
char sig_input_key    = 0;        // last received command key (e.g., 'A','p', etc.)
long sig_input_value  = 0;        // last received value (signed)
bool sig_input_has_cmd = false;   // true when a new key/value was parsed

// ---- USER OUTPUT COMMANDS ----
byte sig_led_r = 0;               // 0/1 for Red LED off/on
byte sig_led_g = 0;               // 0/1 for Green LED off/on
byte sig_led_b = 0;               // 0/1 for Blue LED off/on

bool          sig_buzzer_tone_enable  = false; // if true, tone() is active
unsigned int  sig_buzzer_tone_freq_hz = 1000;  // freq for tone()
unsigned int  sig_buzzer_tone_ms      = 0;     // 0 = continuous; >0 = one-shot duration

bool          sig_buzzer_toggle_enable   = false; // if true (and tone disabled), digital toggling is used
unsigned int  sig_buzzer_toggle_period_ms= 200;   // toggle half-period for square beeps


void setup() {
  // all FSM self-initialize on first call.
  //Serial.begin(115200);
}

void loop() {
  WaveformFSM_update();        // updates sig_waveform_value
  PWMOutputFSM_update();       // writes hardware PWM and bumps sig_pwm_update_counter
  RPM_FSM_update();            // uses ISR counter and PWM edges to compute sig_rpm
  DataLogger_FSM_update(1,1,1,1);//data logger to serial, select periodic free run or sync'd to PWM windows
  //UserInput_FSM_update();   // updates user inputs
  //UserOutput_FSM_update();  // updates user outputs
}
